
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BuchFile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model BuchFile
 * 
 */
export type BuchFileModel = runtime.Types.Result.DefaultSelection<Prisma.$BuchFilePayload>

export type AggregateBuchFile = {
  _count: BuchFileCountAggregateOutputType | null
  _avg: BuchFileAvgAggregateOutputType | null
  _sum: BuchFileSumAggregateOutputType | null
  _min: BuchFileMinAggregateOutputType | null
  _max: BuchFileMaxAggregateOutputType | null
}

export type BuchFileAvgAggregateOutputType = {
  id: number | null
  buchId: number | null
}

export type BuchFileSumAggregateOutputType = {
  id: number | null
  buchId: number | null
}

export type BuchFileMinAggregateOutputType = {
  id: number | null
  data: Uint8Array | null
  filename: string | null
  mimetype: string | null
  buchId: number | null
}

export type BuchFileMaxAggregateOutputType = {
  id: number | null
  data: Uint8Array | null
  filename: string | null
  mimetype: string | null
  buchId: number | null
}

export type BuchFileCountAggregateOutputType = {
  id: number
  data: number
  filename: number
  mimetype: number
  buchId: number
  _all: number
}


export type BuchFileAvgAggregateInputType = {
  id?: true
  buchId?: true
}

export type BuchFileSumAggregateInputType = {
  id?: true
  buchId?: true
}

export type BuchFileMinAggregateInputType = {
  id?: true
  data?: true
  filename?: true
  mimetype?: true
  buchId?: true
}

export type BuchFileMaxAggregateInputType = {
  id?: true
  data?: true
  filename?: true
  mimetype?: true
  buchId?: true
}

export type BuchFileCountAggregateInputType = {
  id?: true
  data?: true
  filename?: true
  mimetype?: true
  buchId?: true
  _all?: true
}

export type BuchFileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BuchFile to aggregate.
   */
  where?: Prisma.BuchFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BuchFiles to fetch.
   */
  orderBy?: Prisma.BuchFileOrderByWithRelationInput | Prisma.BuchFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BuchFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BuchFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BuchFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BuchFiles
  **/
  _count?: true | BuchFileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BuchFileAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BuchFileSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BuchFileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BuchFileMaxAggregateInputType
}

export type GetBuchFileAggregateType<T extends BuchFileAggregateArgs> = {
      [P in keyof T & keyof AggregateBuchFile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBuchFile[P]>
    : Prisma.GetScalarType<T[P], AggregateBuchFile[P]>
}




export type BuchFileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BuchFileWhereInput
  orderBy?: Prisma.BuchFileOrderByWithAggregationInput | Prisma.BuchFileOrderByWithAggregationInput[]
  by: Prisma.BuchFileScalarFieldEnum[] | Prisma.BuchFileScalarFieldEnum
  having?: Prisma.BuchFileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BuchFileCountAggregateInputType | true
  _avg?: BuchFileAvgAggregateInputType
  _sum?: BuchFileSumAggregateInputType
  _min?: BuchFileMinAggregateInputType
  _max?: BuchFileMaxAggregateInputType
}

export type BuchFileGroupByOutputType = {
  id: number
  data: Uint8Array
  filename: string
  mimetype: string | null
  buchId: number
  _count: BuchFileCountAggregateOutputType | null
  _avg: BuchFileAvgAggregateOutputType | null
  _sum: BuchFileSumAggregateOutputType | null
  _min: BuchFileMinAggregateOutputType | null
  _max: BuchFileMaxAggregateOutputType | null
}

type GetBuchFileGroupByPayload<T extends BuchFileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BuchFileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BuchFileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BuchFileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BuchFileGroupByOutputType[P]>
      }
    >
  >



export type BuchFileWhereInput = {
  AND?: Prisma.BuchFileWhereInput | Prisma.BuchFileWhereInput[]
  OR?: Prisma.BuchFileWhereInput[]
  NOT?: Prisma.BuchFileWhereInput | Prisma.BuchFileWhereInput[]
  id?: Prisma.IntFilter<"BuchFile"> | number
  data?: Prisma.BytesFilter<"BuchFile"> | Uint8Array
  filename?: Prisma.StringFilter<"BuchFile"> | string
  mimetype?: Prisma.StringNullableFilter<"BuchFile"> | string | null
  buchId?: Prisma.IntFilter<"BuchFile"> | number
  buch?: Prisma.XOR<Prisma.BuchScalarRelationFilter, Prisma.BuchWhereInput>
}

export type BuchFileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  mimetype?: Prisma.SortOrderInput | Prisma.SortOrder
  buchId?: Prisma.SortOrder
  buch?: Prisma.BuchOrderByWithRelationInput
}

export type BuchFileWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  buchId?: number
  AND?: Prisma.BuchFileWhereInput | Prisma.BuchFileWhereInput[]
  OR?: Prisma.BuchFileWhereInput[]
  NOT?: Prisma.BuchFileWhereInput | Prisma.BuchFileWhereInput[]
  data?: Prisma.BytesFilter<"BuchFile"> | Uint8Array
  filename?: Prisma.StringFilter<"BuchFile"> | string
  mimetype?: Prisma.StringNullableFilter<"BuchFile"> | string | null
  buch?: Prisma.XOR<Prisma.BuchScalarRelationFilter, Prisma.BuchWhereInput>
}, "id" | "buchId">

export type BuchFileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  mimetype?: Prisma.SortOrderInput | Prisma.SortOrder
  buchId?: Prisma.SortOrder
  _count?: Prisma.BuchFileCountOrderByAggregateInput
  _avg?: Prisma.BuchFileAvgOrderByAggregateInput
  _max?: Prisma.BuchFileMaxOrderByAggregateInput
  _min?: Prisma.BuchFileMinOrderByAggregateInput
  _sum?: Prisma.BuchFileSumOrderByAggregateInput
}

export type BuchFileScalarWhereWithAggregatesInput = {
  AND?: Prisma.BuchFileScalarWhereWithAggregatesInput | Prisma.BuchFileScalarWhereWithAggregatesInput[]
  OR?: Prisma.BuchFileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BuchFileScalarWhereWithAggregatesInput | Prisma.BuchFileScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"BuchFile"> | number
  data?: Prisma.BytesWithAggregatesFilter<"BuchFile"> | Uint8Array
  filename?: Prisma.StringWithAggregatesFilter<"BuchFile"> | string
  mimetype?: Prisma.StringNullableWithAggregatesFilter<"BuchFile"> | string | null
  buchId?: Prisma.IntWithAggregatesFilter<"BuchFile"> | number
}

export type BuchFileCreateInput = {
  data: Uint8Array
  filename: string
  mimetype?: string | null
  buch: Prisma.BuchCreateNestedOneWithoutBuchFileInput
}

export type BuchFileUncheckedCreateInput = {
  id?: number
  data: Uint8Array
  filename: string
  mimetype?: string | null
  buchId: number
}

export type BuchFileUpdateInput = {
  data?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  mimetype?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buch?: Prisma.BuchUpdateOneRequiredWithoutBuchFileNestedInput
}

export type BuchFileUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  mimetype?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buchId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BuchFileCreateManyInput = {
  id?: number
  data: Uint8Array
  filename: string
  mimetype?: string | null
  buchId: number
}

export type BuchFileUpdateManyMutationInput = {
  data?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  mimetype?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type BuchFileUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  mimetype?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buchId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type BuchFileNullableScalarRelationFilter = {
  is?: Prisma.BuchFileWhereInput | null
  isNot?: Prisma.BuchFileWhereInput | null
}

export type BuchFileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  mimetype?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type BuchFileAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type BuchFileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  mimetype?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type BuchFileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  data?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  mimetype?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type BuchFileSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type BuchFileCreateNestedOneWithoutBuchInput = {
  create?: Prisma.XOR<Prisma.BuchFileCreateWithoutBuchInput, Prisma.BuchFileUncheckedCreateWithoutBuchInput>
  connectOrCreate?: Prisma.BuchFileCreateOrConnectWithoutBuchInput
  connect?: Prisma.BuchFileWhereUniqueInput
}

export type BuchFileUncheckedCreateNestedOneWithoutBuchInput = {
  create?: Prisma.XOR<Prisma.BuchFileCreateWithoutBuchInput, Prisma.BuchFileUncheckedCreateWithoutBuchInput>
  connectOrCreate?: Prisma.BuchFileCreateOrConnectWithoutBuchInput
  connect?: Prisma.BuchFileWhereUniqueInput
}

export type BuchFileUpdateOneWithoutBuchNestedInput = {
  create?: Prisma.XOR<Prisma.BuchFileCreateWithoutBuchInput, Prisma.BuchFileUncheckedCreateWithoutBuchInput>
  connectOrCreate?: Prisma.BuchFileCreateOrConnectWithoutBuchInput
  upsert?: Prisma.BuchFileUpsertWithoutBuchInput
  disconnect?: Prisma.BuchFileWhereInput | boolean
  delete?: Prisma.BuchFileWhereInput | boolean
  connect?: Prisma.BuchFileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BuchFileUpdateToOneWithWhereWithoutBuchInput, Prisma.BuchFileUpdateWithoutBuchInput>, Prisma.BuchFileUncheckedUpdateWithoutBuchInput>
}

export type BuchFileUncheckedUpdateOneWithoutBuchNestedInput = {
  create?: Prisma.XOR<Prisma.BuchFileCreateWithoutBuchInput, Prisma.BuchFileUncheckedCreateWithoutBuchInput>
  connectOrCreate?: Prisma.BuchFileCreateOrConnectWithoutBuchInput
  upsert?: Prisma.BuchFileUpsertWithoutBuchInput
  disconnect?: Prisma.BuchFileWhereInput | boolean
  delete?: Prisma.BuchFileWhereInput | boolean
  connect?: Prisma.BuchFileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BuchFileUpdateToOneWithWhereWithoutBuchInput, Prisma.BuchFileUpdateWithoutBuchInput>, Prisma.BuchFileUncheckedUpdateWithoutBuchInput>
}

export type BytesFieldUpdateOperationsInput = {
  set?: Uint8Array
}

export type BuchFileCreateWithoutBuchInput = {
  data: Uint8Array
  filename: string
  mimetype?: string | null
}

export type BuchFileUncheckedCreateWithoutBuchInput = {
  id?: number
  data: Uint8Array
  filename: string
  mimetype?: string | null
}

export type BuchFileCreateOrConnectWithoutBuchInput = {
  where: Prisma.BuchFileWhereUniqueInput
  create: Prisma.XOR<Prisma.BuchFileCreateWithoutBuchInput, Prisma.BuchFileUncheckedCreateWithoutBuchInput>
}

export type BuchFileUpsertWithoutBuchInput = {
  update: Prisma.XOR<Prisma.BuchFileUpdateWithoutBuchInput, Prisma.BuchFileUncheckedUpdateWithoutBuchInput>
  create: Prisma.XOR<Prisma.BuchFileCreateWithoutBuchInput, Prisma.BuchFileUncheckedCreateWithoutBuchInput>
  where?: Prisma.BuchFileWhereInput
}

export type BuchFileUpdateToOneWithWhereWithoutBuchInput = {
  where?: Prisma.BuchFileWhereInput
  data: Prisma.XOR<Prisma.BuchFileUpdateWithoutBuchInput, Prisma.BuchFileUncheckedUpdateWithoutBuchInput>
}

export type BuchFileUpdateWithoutBuchInput = {
  data?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  mimetype?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type BuchFileUncheckedUpdateWithoutBuchInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  mimetype?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type BuchFileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  data?: boolean
  filename?: boolean
  mimetype?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["buchFile"]>

export type BuchFileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  data?: boolean
  filename?: boolean
  mimetype?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["buchFile"]>

export type BuchFileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  data?: boolean
  filename?: boolean
  mimetype?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["buchFile"]>

export type BuchFileSelectScalar = {
  id?: boolean
  data?: boolean
  filename?: boolean
  mimetype?: boolean
  buchId?: boolean
}

export type BuchFileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "data" | "filename" | "mimetype" | "buchId", ExtArgs["result"]["buchFile"]>
export type BuchFileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}
export type BuchFileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}
export type BuchFileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}

export type $BuchFilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BuchFile"
  objects: {
    buch: Prisma.$BuchPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    /**
     * https://www.prisma.io/docs/orm/reference/prisma-schema-reference#bytes
     */
    data: Uint8Array
    filename: string
    mimetype: string | null
    buchId: number
  }, ExtArgs["result"]["buchFile"]>
  composites: {}
}

export type BuchFileGetPayload<S extends boolean | null | undefined | BuchFileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BuchFilePayload, S>

export type BuchFileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BuchFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: BuchFileCountAggregateInputType | true
  }

export interface BuchFileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuchFile'], meta: { name: 'BuchFile' } }
  /**
   * Find zero or one BuchFile that matches the filter.
   * @param {BuchFileFindUniqueArgs} args - Arguments to find a BuchFile
   * @example
   * // Get one BuchFile
   * const buchFile = await prisma.buchFile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BuchFileFindUniqueArgs>(args: Prisma.SelectSubset<T, BuchFileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BuchFileClient<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BuchFile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BuchFileFindUniqueOrThrowArgs} args - Arguments to find a BuchFile
   * @example
   * // Get one BuchFile
   * const buchFile = await prisma.buchFile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BuchFileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BuchFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BuchFileClient<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BuchFile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuchFileFindFirstArgs} args - Arguments to find a BuchFile
   * @example
   * // Get one BuchFile
   * const buchFile = await prisma.buchFile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BuchFileFindFirstArgs>(args?: Prisma.SelectSubset<T, BuchFileFindFirstArgs<ExtArgs>>): Prisma.Prisma__BuchFileClient<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BuchFile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuchFileFindFirstOrThrowArgs} args - Arguments to find a BuchFile
   * @example
   * // Get one BuchFile
   * const buchFile = await prisma.buchFile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BuchFileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BuchFileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BuchFileClient<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BuchFiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuchFileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BuchFiles
   * const buchFiles = await prisma.buchFile.findMany()
   * 
   * // Get first 10 BuchFiles
   * const buchFiles = await prisma.buchFile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const buchFileWithIdOnly = await prisma.buchFile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BuchFileFindManyArgs>(args?: Prisma.SelectSubset<T, BuchFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BuchFile.
   * @param {BuchFileCreateArgs} args - Arguments to create a BuchFile.
   * @example
   * // Create one BuchFile
   * const BuchFile = await prisma.buchFile.create({
   *   data: {
   *     // ... data to create a BuchFile
   *   }
   * })
   * 
   */
  create<T extends BuchFileCreateArgs>(args: Prisma.SelectSubset<T, BuchFileCreateArgs<ExtArgs>>): Prisma.Prisma__BuchFileClient<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BuchFiles.
   * @param {BuchFileCreateManyArgs} args - Arguments to create many BuchFiles.
   * @example
   * // Create many BuchFiles
   * const buchFile = await prisma.buchFile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BuchFileCreateManyArgs>(args?: Prisma.SelectSubset<T, BuchFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BuchFiles and returns the data saved in the database.
   * @param {BuchFileCreateManyAndReturnArgs} args - Arguments to create many BuchFiles.
   * @example
   * // Create many BuchFiles
   * const buchFile = await prisma.buchFile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BuchFiles and only return the `id`
   * const buchFileWithIdOnly = await prisma.buchFile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BuchFileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BuchFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BuchFile.
   * @param {BuchFileDeleteArgs} args - Arguments to delete one BuchFile.
   * @example
   * // Delete one BuchFile
   * const BuchFile = await prisma.buchFile.delete({
   *   where: {
   *     // ... filter to delete one BuchFile
   *   }
   * })
   * 
   */
  delete<T extends BuchFileDeleteArgs>(args: Prisma.SelectSubset<T, BuchFileDeleteArgs<ExtArgs>>): Prisma.Prisma__BuchFileClient<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BuchFile.
   * @param {BuchFileUpdateArgs} args - Arguments to update one BuchFile.
   * @example
   * // Update one BuchFile
   * const buchFile = await prisma.buchFile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BuchFileUpdateArgs>(args: Prisma.SelectSubset<T, BuchFileUpdateArgs<ExtArgs>>): Prisma.Prisma__BuchFileClient<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BuchFiles.
   * @param {BuchFileDeleteManyArgs} args - Arguments to filter BuchFiles to delete.
   * @example
   * // Delete a few BuchFiles
   * const { count } = await prisma.buchFile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BuchFileDeleteManyArgs>(args?: Prisma.SelectSubset<T, BuchFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BuchFiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuchFileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BuchFiles
   * const buchFile = await prisma.buchFile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BuchFileUpdateManyArgs>(args: Prisma.SelectSubset<T, BuchFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BuchFiles and returns the data updated in the database.
   * @param {BuchFileUpdateManyAndReturnArgs} args - Arguments to update many BuchFiles.
   * @example
   * // Update many BuchFiles
   * const buchFile = await prisma.buchFile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BuchFiles and only return the `id`
   * const buchFileWithIdOnly = await prisma.buchFile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BuchFileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BuchFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BuchFile.
   * @param {BuchFileUpsertArgs} args - Arguments to update or create a BuchFile.
   * @example
   * // Update or create a BuchFile
   * const buchFile = await prisma.buchFile.upsert({
   *   create: {
   *     // ... data to create a BuchFile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BuchFile we want to update
   *   }
   * })
   */
  upsert<T extends BuchFileUpsertArgs>(args: Prisma.SelectSubset<T, BuchFileUpsertArgs<ExtArgs>>): Prisma.Prisma__BuchFileClient<runtime.Types.Result.GetResult<Prisma.$BuchFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BuchFiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuchFileCountArgs} args - Arguments to filter BuchFiles to count.
   * @example
   * // Count the number of BuchFiles
   * const count = await prisma.buchFile.count({
   *   where: {
   *     // ... the filter for the BuchFiles we want to count
   *   }
   * })
  **/
  count<T extends BuchFileCountArgs>(
    args?: Prisma.Subset<T, BuchFileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BuchFileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BuchFile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuchFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BuchFileAggregateArgs>(args: Prisma.Subset<T, BuchFileAggregateArgs>): Prisma.PrismaPromise<GetBuchFileAggregateType<T>>

  /**
   * Group by BuchFile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuchFileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BuchFileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BuchFileGroupByArgs['orderBy'] }
      : { orderBy?: BuchFileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BuchFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuchFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BuchFile model
 */
readonly fields: BuchFileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BuchFile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BuchFileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  buch<T extends Prisma.BuchDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BuchDefaultArgs<ExtArgs>>): Prisma.Prisma__BuchClient<runtime.Types.Result.GetResult<Prisma.$BuchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BuchFile model
 */
export interface BuchFileFieldRefs {
  readonly id: Prisma.FieldRef<"BuchFile", 'Int'>
  readonly data: Prisma.FieldRef<"BuchFile", 'Bytes'>
  readonly filename: Prisma.FieldRef<"BuchFile", 'String'>
  readonly mimetype: Prisma.FieldRef<"BuchFile", 'String'>
  readonly buchId: Prisma.FieldRef<"BuchFile", 'Int'>
}
    

// Custom InputTypes
/**
 * BuchFile findUnique
 */
export type BuchFileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * Filter, which BuchFile to fetch.
   */
  where: Prisma.BuchFileWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile findUniqueOrThrow
 */
export type BuchFileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * Filter, which BuchFile to fetch.
   */
  where: Prisma.BuchFileWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile findFirst
 */
export type BuchFileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * Filter, which BuchFile to fetch.
   */
  where?: Prisma.BuchFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BuchFiles to fetch.
   */
  orderBy?: Prisma.BuchFileOrderByWithRelationInput | Prisma.BuchFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BuchFiles.
   */
  cursor?: Prisma.BuchFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BuchFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BuchFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BuchFiles.
   */
  distinct?: Prisma.BuchFileScalarFieldEnum | Prisma.BuchFileScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile findFirstOrThrow
 */
export type BuchFileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * Filter, which BuchFile to fetch.
   */
  where?: Prisma.BuchFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BuchFiles to fetch.
   */
  orderBy?: Prisma.BuchFileOrderByWithRelationInput | Prisma.BuchFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BuchFiles.
   */
  cursor?: Prisma.BuchFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BuchFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BuchFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BuchFiles.
   */
  distinct?: Prisma.BuchFileScalarFieldEnum | Prisma.BuchFileScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile findMany
 */
export type BuchFileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * Filter, which BuchFiles to fetch.
   */
  where?: Prisma.BuchFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BuchFiles to fetch.
   */
  orderBy?: Prisma.BuchFileOrderByWithRelationInput | Prisma.BuchFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BuchFiles.
   */
  cursor?: Prisma.BuchFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BuchFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BuchFiles.
   */
  skip?: number
  distinct?: Prisma.BuchFileScalarFieldEnum | Prisma.BuchFileScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile create
 */
export type BuchFileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * The data needed to create a BuchFile.
   */
  data: Prisma.XOR<Prisma.BuchFileCreateInput, Prisma.BuchFileUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile createMany
 */
export type BuchFileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BuchFiles.
   */
  data: Prisma.BuchFileCreateManyInput | Prisma.BuchFileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BuchFile createManyAndReturn
 */
export type BuchFileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * The data used to create many BuchFiles.
   */
  data: Prisma.BuchFileCreateManyInput | Prisma.BuchFileCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * BuchFile update
 */
export type BuchFileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * The data needed to update a BuchFile.
   */
  data: Prisma.XOR<Prisma.BuchFileUpdateInput, Prisma.BuchFileUncheckedUpdateInput>
  /**
   * Choose, which BuchFile to update.
   */
  where: Prisma.BuchFileWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile updateMany
 */
export type BuchFileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BuchFiles.
   */
  data: Prisma.XOR<Prisma.BuchFileUpdateManyMutationInput, Prisma.BuchFileUncheckedUpdateManyInput>
  /**
   * Filter which BuchFiles to update
   */
  where?: Prisma.BuchFileWhereInput
  /**
   * Limit how many BuchFiles to update.
   */
  limit?: number
}

/**
 * BuchFile updateManyAndReturn
 */
export type BuchFileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * The data used to update BuchFiles.
   */
  data: Prisma.XOR<Prisma.BuchFileUpdateManyMutationInput, Prisma.BuchFileUncheckedUpdateManyInput>
  /**
   * Filter which BuchFiles to update
   */
  where?: Prisma.BuchFileWhereInput
  /**
   * Limit how many BuchFiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * BuchFile upsert
 */
export type BuchFileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * The filter to search for the BuchFile to update in case it exists.
   */
  where: Prisma.BuchFileWhereUniqueInput
  /**
   * In case the BuchFile found by the `where` argument doesn't exist, create a new BuchFile with this data.
   */
  create: Prisma.XOR<Prisma.BuchFileCreateInput, Prisma.BuchFileUncheckedCreateInput>
  /**
   * In case the BuchFile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BuchFileUpdateInput, Prisma.BuchFileUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile delete
 */
export type BuchFileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
  /**
   * Filter which BuchFile to delete.
   */
  where: Prisma.BuchFileWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * BuchFile deleteMany
 */
export type BuchFileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BuchFiles to delete
   */
  where?: Prisma.BuchFileWhereInput
  /**
   * Limit how many BuchFiles to delete.
   */
  limit?: number
}

/**
 * BuchFile without action
 */
export type BuchFileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuchFile
   */
  select?: Prisma.BuchFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BuchFile
   */
  omit?: Prisma.BuchFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuchFileInclude<ExtArgs> | null
}

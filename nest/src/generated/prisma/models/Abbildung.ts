
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Abbildung` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Abbildung
 * https://www.prisma.io/docs/orm/reference/prisma-schema-reference#datasource
 */
export type AbbildungModel = runtime.Types.Result.DefaultSelection<Prisma.$AbbildungPayload>

export type AggregateAbbildung = {
  _count: AbbildungCountAggregateOutputType | null
  _avg: AbbildungAvgAggregateOutputType | null
  _sum: AbbildungSumAggregateOutputType | null
  _min: AbbildungMinAggregateOutputType | null
  _max: AbbildungMaxAggregateOutputType | null
}

export type AbbildungAvgAggregateOutputType = {
  id: number | null
  buchId: number | null
}

export type AbbildungSumAggregateOutputType = {
  id: number | null
  buchId: number | null
}

export type AbbildungMinAggregateOutputType = {
  id: number | null
  beschriftung: string | null
  contentType: string | null
  buchId: number | null
}

export type AbbildungMaxAggregateOutputType = {
  id: number | null
  beschriftung: string | null
  contentType: string | null
  buchId: number | null
}

export type AbbildungCountAggregateOutputType = {
  id: number
  beschriftung: number
  contentType: number
  buchId: number
  _all: number
}


export type AbbildungAvgAggregateInputType = {
  id?: true
  buchId?: true
}

export type AbbildungSumAggregateInputType = {
  id?: true
  buchId?: true
}

export type AbbildungMinAggregateInputType = {
  id?: true
  beschriftung?: true
  contentType?: true
  buchId?: true
}

export type AbbildungMaxAggregateInputType = {
  id?: true
  beschriftung?: true
  contentType?: true
  buchId?: true
}

export type AbbildungCountAggregateInputType = {
  id?: true
  beschriftung?: true
  contentType?: true
  buchId?: true
  _all?: true
}

export type AbbildungAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Abbildung to aggregate.
   */
  where?: Prisma.AbbildungWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Abbildungs to fetch.
   */
  orderBy?: Prisma.AbbildungOrderByWithRelationInput | Prisma.AbbildungOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AbbildungWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Abbildungs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Abbildungs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Abbildungs
  **/
  _count?: true | AbbildungCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AbbildungAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AbbildungSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AbbildungMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AbbildungMaxAggregateInputType
}

export type GetAbbildungAggregateType<T extends AbbildungAggregateArgs> = {
      [P in keyof T & keyof AggregateAbbildung]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAbbildung[P]>
    : Prisma.GetScalarType<T[P], AggregateAbbildung[P]>
}




export type AbbildungGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AbbildungWhereInput
  orderBy?: Prisma.AbbildungOrderByWithAggregationInput | Prisma.AbbildungOrderByWithAggregationInput[]
  by: Prisma.AbbildungScalarFieldEnum[] | Prisma.AbbildungScalarFieldEnum
  having?: Prisma.AbbildungScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AbbildungCountAggregateInputType | true
  _avg?: AbbildungAvgAggregateInputType
  _sum?: AbbildungSumAggregateInputType
  _min?: AbbildungMinAggregateInputType
  _max?: AbbildungMaxAggregateInputType
}

export type AbbildungGroupByOutputType = {
  id: number
  beschriftung: string
  contentType: string
  buchId: number
  _count: AbbildungCountAggregateOutputType | null
  _avg: AbbildungAvgAggregateOutputType | null
  _sum: AbbildungSumAggregateOutputType | null
  _min: AbbildungMinAggregateOutputType | null
  _max: AbbildungMaxAggregateOutputType | null
}

type GetAbbildungGroupByPayload<T extends AbbildungGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AbbildungGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AbbildungGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AbbildungGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AbbildungGroupByOutputType[P]>
      }
    >
  >



export type AbbildungWhereInput = {
  AND?: Prisma.AbbildungWhereInput | Prisma.AbbildungWhereInput[]
  OR?: Prisma.AbbildungWhereInput[]
  NOT?: Prisma.AbbildungWhereInput | Prisma.AbbildungWhereInput[]
  id?: Prisma.IntFilter<"Abbildung"> | number
  beschriftung?: Prisma.StringFilter<"Abbildung"> | string
  contentType?: Prisma.StringFilter<"Abbildung"> | string
  buchId?: Prisma.IntFilter<"Abbildung"> | number
  buch?: Prisma.XOR<Prisma.BuchScalarRelationFilter, Prisma.BuchWhereInput>
}

export type AbbildungOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  beschriftung?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
  buch?: Prisma.BuchOrderByWithRelationInput
}

export type AbbildungWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AbbildungWhereInput | Prisma.AbbildungWhereInput[]
  OR?: Prisma.AbbildungWhereInput[]
  NOT?: Prisma.AbbildungWhereInput | Prisma.AbbildungWhereInput[]
  beschriftung?: Prisma.StringFilter<"Abbildung"> | string
  contentType?: Prisma.StringFilter<"Abbildung"> | string
  buchId?: Prisma.IntFilter<"Abbildung"> | number
  buch?: Prisma.XOR<Prisma.BuchScalarRelationFilter, Prisma.BuchWhereInput>
}, "id">

export type AbbildungOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  beschriftung?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
  _count?: Prisma.AbbildungCountOrderByAggregateInput
  _avg?: Prisma.AbbildungAvgOrderByAggregateInput
  _max?: Prisma.AbbildungMaxOrderByAggregateInput
  _min?: Prisma.AbbildungMinOrderByAggregateInput
  _sum?: Prisma.AbbildungSumOrderByAggregateInput
}

export type AbbildungScalarWhereWithAggregatesInput = {
  AND?: Prisma.AbbildungScalarWhereWithAggregatesInput | Prisma.AbbildungScalarWhereWithAggregatesInput[]
  OR?: Prisma.AbbildungScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AbbildungScalarWhereWithAggregatesInput | Prisma.AbbildungScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Abbildung"> | number
  beschriftung?: Prisma.StringWithAggregatesFilter<"Abbildung"> | string
  contentType?: Prisma.StringWithAggregatesFilter<"Abbildung"> | string
  buchId?: Prisma.IntWithAggregatesFilter<"Abbildung"> | number
}

export type AbbildungCreateInput = {
  beschriftung: string
  contentType: string
  buch: Prisma.BuchCreateNestedOneWithoutAbbildungenInput
}

export type AbbildungUncheckedCreateInput = {
  id?: number
  beschriftung: string
  contentType: string
  buchId: number
}

export type AbbildungUpdateInput = {
  beschriftung?: Prisma.StringFieldUpdateOperationsInput | string
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  buch?: Prisma.BuchUpdateOneRequiredWithoutAbbildungenNestedInput
}

export type AbbildungUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  beschriftung?: Prisma.StringFieldUpdateOperationsInput | string
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  buchId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AbbildungCreateManyInput = {
  id?: number
  beschriftung: string
  contentType: string
  buchId: number
}

export type AbbildungUpdateManyMutationInput = {
  beschriftung?: Prisma.StringFieldUpdateOperationsInput | string
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AbbildungUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  beschriftung?: Prisma.StringFieldUpdateOperationsInput | string
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  buchId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AbbildungCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  beschriftung?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type AbbildungAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type AbbildungMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  beschriftung?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type AbbildungMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  beschriftung?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type AbbildungSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type AbbildungListRelationFilter = {
  every?: Prisma.AbbildungWhereInput
  some?: Prisma.AbbildungWhereInput
  none?: Prisma.AbbildungWhereInput
}

export type AbbildungOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type AbbildungCreateNestedManyWithoutBuchInput = {
  create?: Prisma.XOR<Prisma.AbbildungCreateWithoutBuchInput, Prisma.AbbildungUncheckedCreateWithoutBuchInput> | Prisma.AbbildungCreateWithoutBuchInput[] | Prisma.AbbildungUncheckedCreateWithoutBuchInput[]
  connectOrCreate?: Prisma.AbbildungCreateOrConnectWithoutBuchInput | Prisma.AbbildungCreateOrConnectWithoutBuchInput[]
  createMany?: Prisma.AbbildungCreateManyBuchInputEnvelope
  connect?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
}

export type AbbildungUncheckedCreateNestedManyWithoutBuchInput = {
  create?: Prisma.XOR<Prisma.AbbildungCreateWithoutBuchInput, Prisma.AbbildungUncheckedCreateWithoutBuchInput> | Prisma.AbbildungCreateWithoutBuchInput[] | Prisma.AbbildungUncheckedCreateWithoutBuchInput[]
  connectOrCreate?: Prisma.AbbildungCreateOrConnectWithoutBuchInput | Prisma.AbbildungCreateOrConnectWithoutBuchInput[]
  createMany?: Prisma.AbbildungCreateManyBuchInputEnvelope
  connect?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
}

export type AbbildungUpdateManyWithoutBuchNestedInput = {
  create?: Prisma.XOR<Prisma.AbbildungCreateWithoutBuchInput, Prisma.AbbildungUncheckedCreateWithoutBuchInput> | Prisma.AbbildungCreateWithoutBuchInput[] | Prisma.AbbildungUncheckedCreateWithoutBuchInput[]
  connectOrCreate?: Prisma.AbbildungCreateOrConnectWithoutBuchInput | Prisma.AbbildungCreateOrConnectWithoutBuchInput[]
  upsert?: Prisma.AbbildungUpsertWithWhereUniqueWithoutBuchInput | Prisma.AbbildungUpsertWithWhereUniqueWithoutBuchInput[]
  createMany?: Prisma.AbbildungCreateManyBuchInputEnvelope
  set?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
  disconnect?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
  delete?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
  connect?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
  update?: Prisma.AbbildungUpdateWithWhereUniqueWithoutBuchInput | Prisma.AbbildungUpdateWithWhereUniqueWithoutBuchInput[]
  updateMany?: Prisma.AbbildungUpdateManyWithWhereWithoutBuchInput | Prisma.AbbildungUpdateManyWithWhereWithoutBuchInput[]
  deleteMany?: Prisma.AbbildungScalarWhereInput | Prisma.AbbildungScalarWhereInput[]
}

export type AbbildungUncheckedUpdateManyWithoutBuchNestedInput = {
  create?: Prisma.XOR<Prisma.AbbildungCreateWithoutBuchInput, Prisma.AbbildungUncheckedCreateWithoutBuchInput> | Prisma.AbbildungCreateWithoutBuchInput[] | Prisma.AbbildungUncheckedCreateWithoutBuchInput[]
  connectOrCreate?: Prisma.AbbildungCreateOrConnectWithoutBuchInput | Prisma.AbbildungCreateOrConnectWithoutBuchInput[]
  upsert?: Prisma.AbbildungUpsertWithWhereUniqueWithoutBuchInput | Prisma.AbbildungUpsertWithWhereUniqueWithoutBuchInput[]
  createMany?: Prisma.AbbildungCreateManyBuchInputEnvelope
  set?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
  disconnect?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
  delete?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
  connect?: Prisma.AbbildungWhereUniqueInput | Prisma.AbbildungWhereUniqueInput[]
  update?: Prisma.AbbildungUpdateWithWhereUniqueWithoutBuchInput | Prisma.AbbildungUpdateWithWhereUniqueWithoutBuchInput[]
  updateMany?: Prisma.AbbildungUpdateManyWithWhereWithoutBuchInput | Prisma.AbbildungUpdateManyWithWhereWithoutBuchInput[]
  deleteMany?: Prisma.AbbildungScalarWhereInput | Prisma.AbbildungScalarWhereInput[]
}

export type AbbildungCreateWithoutBuchInput = {
  beschriftung: string
  contentType: string
}

export type AbbildungUncheckedCreateWithoutBuchInput = {
  id?: number
  beschriftung: string
  contentType: string
}

export type AbbildungCreateOrConnectWithoutBuchInput = {
  where: Prisma.AbbildungWhereUniqueInput
  create: Prisma.XOR<Prisma.AbbildungCreateWithoutBuchInput, Prisma.AbbildungUncheckedCreateWithoutBuchInput>
}

export type AbbildungCreateManyBuchInputEnvelope = {
  data: Prisma.AbbildungCreateManyBuchInput | Prisma.AbbildungCreateManyBuchInput[]
  skipDuplicates?: boolean
}

export type AbbildungUpsertWithWhereUniqueWithoutBuchInput = {
  where: Prisma.AbbildungWhereUniqueInput
  update: Prisma.XOR<Prisma.AbbildungUpdateWithoutBuchInput, Prisma.AbbildungUncheckedUpdateWithoutBuchInput>
  create: Prisma.XOR<Prisma.AbbildungCreateWithoutBuchInput, Prisma.AbbildungUncheckedCreateWithoutBuchInput>
}

export type AbbildungUpdateWithWhereUniqueWithoutBuchInput = {
  where: Prisma.AbbildungWhereUniqueInput
  data: Prisma.XOR<Prisma.AbbildungUpdateWithoutBuchInput, Prisma.AbbildungUncheckedUpdateWithoutBuchInput>
}

export type AbbildungUpdateManyWithWhereWithoutBuchInput = {
  where: Prisma.AbbildungScalarWhereInput
  data: Prisma.XOR<Prisma.AbbildungUpdateManyMutationInput, Prisma.AbbildungUncheckedUpdateManyWithoutBuchInput>
}

export type AbbildungScalarWhereInput = {
  AND?: Prisma.AbbildungScalarWhereInput | Prisma.AbbildungScalarWhereInput[]
  OR?: Prisma.AbbildungScalarWhereInput[]
  NOT?: Prisma.AbbildungScalarWhereInput | Prisma.AbbildungScalarWhereInput[]
  id?: Prisma.IntFilter<"Abbildung"> | number
  beschriftung?: Prisma.StringFilter<"Abbildung"> | string
  contentType?: Prisma.StringFilter<"Abbildung"> | string
  buchId?: Prisma.IntFilter<"Abbildung"> | number
}

export type AbbildungCreateManyBuchInput = {
  id?: number
  beschriftung: string
  contentType: string
}

export type AbbildungUpdateWithoutBuchInput = {
  beschriftung?: Prisma.StringFieldUpdateOperationsInput | string
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AbbildungUncheckedUpdateWithoutBuchInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  beschriftung?: Prisma.StringFieldUpdateOperationsInput | string
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AbbildungUncheckedUpdateManyWithoutBuchInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  beschriftung?: Prisma.StringFieldUpdateOperationsInput | string
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
}



export type AbbildungSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  beschriftung?: boolean
  contentType?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["abbildung"]>

export type AbbildungSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  beschriftung?: boolean
  contentType?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["abbildung"]>

export type AbbildungSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  beschriftung?: boolean
  contentType?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["abbildung"]>

export type AbbildungSelectScalar = {
  id?: boolean
  beschriftung?: boolean
  contentType?: boolean
  buchId?: boolean
}

export type AbbildungOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "beschriftung" | "contentType" | "buchId", ExtArgs["result"]["abbildung"]>
export type AbbildungInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}
export type AbbildungIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}
export type AbbildungIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}

export type $AbbildungPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Abbildung"
  objects: {
    /**
     * https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults
     */
    buch: Prisma.$BuchPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    beschriftung: string
    contentType: string
    buchId: number
  }, ExtArgs["result"]["abbildung"]>
  composites: {}
}

export type AbbildungGetPayload<S extends boolean | null | undefined | AbbildungDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AbbildungPayload, S>

export type AbbildungCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AbbildungFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: AbbildungCountAggregateInputType | true
  }

export interface AbbildungDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Abbildung'], meta: { name: 'Abbildung' } }
  /**
   * Find zero or one Abbildung that matches the filter.
   * @param {AbbildungFindUniqueArgs} args - Arguments to find a Abbildung
   * @example
   * // Get one Abbildung
   * const abbildung = await prisma.abbildung.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AbbildungFindUniqueArgs>(args: Prisma.SelectSubset<T, AbbildungFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AbbildungClient<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Abbildung that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AbbildungFindUniqueOrThrowArgs} args - Arguments to find a Abbildung
   * @example
   * // Get one Abbildung
   * const abbildung = await prisma.abbildung.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AbbildungFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AbbildungFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AbbildungClient<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Abbildung that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbbildungFindFirstArgs} args - Arguments to find a Abbildung
   * @example
   * // Get one Abbildung
   * const abbildung = await prisma.abbildung.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AbbildungFindFirstArgs>(args?: Prisma.SelectSubset<T, AbbildungFindFirstArgs<ExtArgs>>): Prisma.Prisma__AbbildungClient<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Abbildung that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbbildungFindFirstOrThrowArgs} args - Arguments to find a Abbildung
   * @example
   * // Get one Abbildung
   * const abbildung = await prisma.abbildung.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AbbildungFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AbbildungFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AbbildungClient<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Abbildungs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbbildungFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Abbildungs
   * const abbildungs = await prisma.abbildung.findMany()
   * 
   * // Get first 10 Abbildungs
   * const abbildungs = await prisma.abbildung.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const abbildungWithIdOnly = await prisma.abbildung.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AbbildungFindManyArgs>(args?: Prisma.SelectSubset<T, AbbildungFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Abbildung.
   * @param {AbbildungCreateArgs} args - Arguments to create a Abbildung.
   * @example
   * // Create one Abbildung
   * const Abbildung = await prisma.abbildung.create({
   *   data: {
   *     // ... data to create a Abbildung
   *   }
   * })
   * 
   */
  create<T extends AbbildungCreateArgs>(args: Prisma.SelectSubset<T, AbbildungCreateArgs<ExtArgs>>): Prisma.Prisma__AbbildungClient<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Abbildungs.
   * @param {AbbildungCreateManyArgs} args - Arguments to create many Abbildungs.
   * @example
   * // Create many Abbildungs
   * const abbildung = await prisma.abbildung.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AbbildungCreateManyArgs>(args?: Prisma.SelectSubset<T, AbbildungCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Abbildungs and returns the data saved in the database.
   * @param {AbbildungCreateManyAndReturnArgs} args - Arguments to create many Abbildungs.
   * @example
   * // Create many Abbildungs
   * const abbildung = await prisma.abbildung.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Abbildungs and only return the `id`
   * const abbildungWithIdOnly = await prisma.abbildung.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AbbildungCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AbbildungCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Abbildung.
   * @param {AbbildungDeleteArgs} args - Arguments to delete one Abbildung.
   * @example
   * // Delete one Abbildung
   * const Abbildung = await prisma.abbildung.delete({
   *   where: {
   *     // ... filter to delete one Abbildung
   *   }
   * })
   * 
   */
  delete<T extends AbbildungDeleteArgs>(args: Prisma.SelectSubset<T, AbbildungDeleteArgs<ExtArgs>>): Prisma.Prisma__AbbildungClient<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Abbildung.
   * @param {AbbildungUpdateArgs} args - Arguments to update one Abbildung.
   * @example
   * // Update one Abbildung
   * const abbildung = await prisma.abbildung.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AbbildungUpdateArgs>(args: Prisma.SelectSubset<T, AbbildungUpdateArgs<ExtArgs>>): Prisma.Prisma__AbbildungClient<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Abbildungs.
   * @param {AbbildungDeleteManyArgs} args - Arguments to filter Abbildungs to delete.
   * @example
   * // Delete a few Abbildungs
   * const { count } = await prisma.abbildung.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AbbildungDeleteManyArgs>(args?: Prisma.SelectSubset<T, AbbildungDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Abbildungs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbbildungUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Abbildungs
   * const abbildung = await prisma.abbildung.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AbbildungUpdateManyArgs>(args: Prisma.SelectSubset<T, AbbildungUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Abbildungs and returns the data updated in the database.
   * @param {AbbildungUpdateManyAndReturnArgs} args - Arguments to update many Abbildungs.
   * @example
   * // Update many Abbildungs
   * const abbildung = await prisma.abbildung.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Abbildungs and only return the `id`
   * const abbildungWithIdOnly = await prisma.abbildung.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AbbildungUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AbbildungUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Abbildung.
   * @param {AbbildungUpsertArgs} args - Arguments to update or create a Abbildung.
   * @example
   * // Update or create a Abbildung
   * const abbildung = await prisma.abbildung.upsert({
   *   create: {
   *     // ... data to create a Abbildung
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Abbildung we want to update
   *   }
   * })
   */
  upsert<T extends AbbildungUpsertArgs>(args: Prisma.SelectSubset<T, AbbildungUpsertArgs<ExtArgs>>): Prisma.Prisma__AbbildungClient<runtime.Types.Result.GetResult<Prisma.$AbbildungPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Abbildungs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbbildungCountArgs} args - Arguments to filter Abbildungs to count.
   * @example
   * // Count the number of Abbildungs
   * const count = await prisma.abbildung.count({
   *   where: {
   *     // ... the filter for the Abbildungs we want to count
   *   }
   * })
  **/
  count<T extends AbbildungCountArgs>(
    args?: Prisma.Subset<T, AbbildungCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AbbildungCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Abbildung.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbbildungAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AbbildungAggregateArgs>(args: Prisma.Subset<T, AbbildungAggregateArgs>): Prisma.PrismaPromise<GetAbbildungAggregateType<T>>

  /**
   * Group by Abbildung.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AbbildungGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AbbildungGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AbbildungGroupByArgs['orderBy'] }
      : { orderBy?: AbbildungGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AbbildungGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAbbildungGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Abbildung model
 */
readonly fields: AbbildungFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Abbildung.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AbbildungClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  buch<T extends Prisma.BuchDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BuchDefaultArgs<ExtArgs>>): Prisma.Prisma__BuchClient<runtime.Types.Result.GetResult<Prisma.$BuchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Abbildung model
 */
export interface AbbildungFieldRefs {
  readonly id: Prisma.FieldRef<"Abbildung", 'Int'>
  readonly beschriftung: Prisma.FieldRef<"Abbildung", 'String'>
  readonly contentType: Prisma.FieldRef<"Abbildung", 'String'>
  readonly buchId: Prisma.FieldRef<"Abbildung", 'Int'>
}
    

// Custom InputTypes
/**
 * Abbildung findUnique
 */
export type AbbildungFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * Filter, which Abbildung to fetch.
   */
  where: Prisma.AbbildungWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung findUniqueOrThrow
 */
export type AbbildungFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * Filter, which Abbildung to fetch.
   */
  where: Prisma.AbbildungWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung findFirst
 */
export type AbbildungFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * Filter, which Abbildung to fetch.
   */
  where?: Prisma.AbbildungWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Abbildungs to fetch.
   */
  orderBy?: Prisma.AbbildungOrderByWithRelationInput | Prisma.AbbildungOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Abbildungs.
   */
  cursor?: Prisma.AbbildungWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Abbildungs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Abbildungs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Abbildungs.
   */
  distinct?: Prisma.AbbildungScalarFieldEnum | Prisma.AbbildungScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung findFirstOrThrow
 */
export type AbbildungFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * Filter, which Abbildung to fetch.
   */
  where?: Prisma.AbbildungWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Abbildungs to fetch.
   */
  orderBy?: Prisma.AbbildungOrderByWithRelationInput | Prisma.AbbildungOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Abbildungs.
   */
  cursor?: Prisma.AbbildungWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Abbildungs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Abbildungs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Abbildungs.
   */
  distinct?: Prisma.AbbildungScalarFieldEnum | Prisma.AbbildungScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung findMany
 */
export type AbbildungFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * Filter, which Abbildungs to fetch.
   */
  where?: Prisma.AbbildungWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Abbildungs to fetch.
   */
  orderBy?: Prisma.AbbildungOrderByWithRelationInput | Prisma.AbbildungOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Abbildungs.
   */
  cursor?: Prisma.AbbildungWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Abbildungs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Abbildungs.
   */
  skip?: number
  distinct?: Prisma.AbbildungScalarFieldEnum | Prisma.AbbildungScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung create
 */
export type AbbildungCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * The data needed to create a Abbildung.
   */
  data: Prisma.XOR<Prisma.AbbildungCreateInput, Prisma.AbbildungUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung createMany
 */
export type AbbildungCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Abbildungs.
   */
  data: Prisma.AbbildungCreateManyInput | Prisma.AbbildungCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Abbildung createManyAndReturn
 */
export type AbbildungCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * The data used to create many Abbildungs.
   */
  data: Prisma.AbbildungCreateManyInput | Prisma.AbbildungCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Abbildung update
 */
export type AbbildungUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * The data needed to update a Abbildung.
   */
  data: Prisma.XOR<Prisma.AbbildungUpdateInput, Prisma.AbbildungUncheckedUpdateInput>
  /**
   * Choose, which Abbildung to update.
   */
  where: Prisma.AbbildungWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung updateMany
 */
export type AbbildungUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Abbildungs.
   */
  data: Prisma.XOR<Prisma.AbbildungUpdateManyMutationInput, Prisma.AbbildungUncheckedUpdateManyInput>
  /**
   * Filter which Abbildungs to update
   */
  where?: Prisma.AbbildungWhereInput
  /**
   * Limit how many Abbildungs to update.
   */
  limit?: number
}

/**
 * Abbildung updateManyAndReturn
 */
export type AbbildungUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * The data used to update Abbildungs.
   */
  data: Prisma.XOR<Prisma.AbbildungUpdateManyMutationInput, Prisma.AbbildungUncheckedUpdateManyInput>
  /**
   * Filter which Abbildungs to update
   */
  where?: Prisma.AbbildungWhereInput
  /**
   * Limit how many Abbildungs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Abbildung upsert
 */
export type AbbildungUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * The filter to search for the Abbildung to update in case it exists.
   */
  where: Prisma.AbbildungWhereUniqueInput
  /**
   * In case the Abbildung found by the `where` argument doesn't exist, create a new Abbildung with this data.
   */
  create: Prisma.XOR<Prisma.AbbildungCreateInput, Prisma.AbbildungUncheckedCreateInput>
  /**
   * In case the Abbildung was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AbbildungUpdateInput, Prisma.AbbildungUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung delete
 */
export type AbbildungDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
  /**
   * Filter which Abbildung to delete.
   */
  where: Prisma.AbbildungWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Abbildung deleteMany
 */
export type AbbildungDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Abbildungs to delete
   */
  where?: Prisma.AbbildungWhereInput
  /**
   * Limit how many Abbildungs to delete.
   */
  limit?: number
}

/**
 * Abbildung without action
 */
export type AbbildungDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Abbildung
   */
  select?: Prisma.AbbildungSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Abbildung
   */
  omit?: Prisma.AbbildungOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AbbildungInclude<ExtArgs> | null
}

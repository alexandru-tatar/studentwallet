
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Titel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Titel
 * 
 */
export type TitelModel = runtime.Types.Result.DefaultSelection<Prisma.$TitelPayload>

export type AggregateTitel = {
  _count: TitelCountAggregateOutputType | null
  _avg: TitelAvgAggregateOutputType | null
  _sum: TitelSumAggregateOutputType | null
  _min: TitelMinAggregateOutputType | null
  _max: TitelMaxAggregateOutputType | null
}

export type TitelAvgAggregateOutputType = {
  id: number | null
  buchId: number | null
}

export type TitelSumAggregateOutputType = {
  id: number | null
  buchId: number | null
}

export type TitelMinAggregateOutputType = {
  id: number | null
  titel: string | null
  untertitel: string | null
  buchId: number | null
}

export type TitelMaxAggregateOutputType = {
  id: number | null
  titel: string | null
  untertitel: string | null
  buchId: number | null
}

export type TitelCountAggregateOutputType = {
  id: number
  titel: number
  untertitel: number
  buchId: number
  _all: number
}


export type TitelAvgAggregateInputType = {
  id?: true
  buchId?: true
}

export type TitelSumAggregateInputType = {
  id?: true
  buchId?: true
}

export type TitelMinAggregateInputType = {
  id?: true
  titel?: true
  untertitel?: true
  buchId?: true
}

export type TitelMaxAggregateInputType = {
  id?: true
  titel?: true
  untertitel?: true
  buchId?: true
}

export type TitelCountAggregateInputType = {
  id?: true
  titel?: true
  untertitel?: true
  buchId?: true
  _all?: true
}

export type TitelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Titel to aggregate.
   */
  where?: Prisma.TitelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Titels to fetch.
   */
  orderBy?: Prisma.TitelOrderByWithRelationInput | Prisma.TitelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TitelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Titels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Titels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Titels
  **/
  _count?: true | TitelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TitelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TitelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TitelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TitelMaxAggregateInputType
}

export type GetTitelAggregateType<T extends TitelAggregateArgs> = {
      [P in keyof T & keyof AggregateTitel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTitel[P]>
    : Prisma.GetScalarType<T[P], AggregateTitel[P]>
}




export type TitelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TitelWhereInput
  orderBy?: Prisma.TitelOrderByWithAggregationInput | Prisma.TitelOrderByWithAggregationInput[]
  by: Prisma.TitelScalarFieldEnum[] | Prisma.TitelScalarFieldEnum
  having?: Prisma.TitelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TitelCountAggregateInputType | true
  _avg?: TitelAvgAggregateInputType
  _sum?: TitelSumAggregateInputType
  _min?: TitelMinAggregateInputType
  _max?: TitelMaxAggregateInputType
}

export type TitelGroupByOutputType = {
  id: number
  titel: string
  untertitel: string | null
  buchId: number
  _count: TitelCountAggregateOutputType | null
  _avg: TitelAvgAggregateOutputType | null
  _sum: TitelSumAggregateOutputType | null
  _min: TitelMinAggregateOutputType | null
  _max: TitelMaxAggregateOutputType | null
}

type GetTitelGroupByPayload<T extends TitelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TitelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TitelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TitelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TitelGroupByOutputType[P]>
      }
    >
  >



export type TitelWhereInput = {
  AND?: Prisma.TitelWhereInput | Prisma.TitelWhereInput[]
  OR?: Prisma.TitelWhereInput[]
  NOT?: Prisma.TitelWhereInput | Prisma.TitelWhereInput[]
  id?: Prisma.IntFilter<"Titel"> | number
  titel?: Prisma.StringFilter<"Titel"> | string
  untertitel?: Prisma.StringNullableFilter<"Titel"> | string | null
  buchId?: Prisma.IntFilter<"Titel"> | number
  buch?: Prisma.XOR<Prisma.BuchScalarRelationFilter, Prisma.BuchWhereInput>
}

export type TitelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  titel?: Prisma.SortOrder
  untertitel?: Prisma.SortOrderInput | Prisma.SortOrder
  buchId?: Prisma.SortOrder
  buch?: Prisma.BuchOrderByWithRelationInput
}

export type TitelWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  buchId?: number
  AND?: Prisma.TitelWhereInput | Prisma.TitelWhereInput[]
  OR?: Prisma.TitelWhereInput[]
  NOT?: Prisma.TitelWhereInput | Prisma.TitelWhereInput[]
  titel?: Prisma.StringFilter<"Titel"> | string
  untertitel?: Prisma.StringNullableFilter<"Titel"> | string | null
  buch?: Prisma.XOR<Prisma.BuchScalarRelationFilter, Prisma.BuchWhereInput>
}, "id" | "buchId">

export type TitelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  titel?: Prisma.SortOrder
  untertitel?: Prisma.SortOrderInput | Prisma.SortOrder
  buchId?: Prisma.SortOrder
  _count?: Prisma.TitelCountOrderByAggregateInput
  _avg?: Prisma.TitelAvgOrderByAggregateInput
  _max?: Prisma.TitelMaxOrderByAggregateInput
  _min?: Prisma.TitelMinOrderByAggregateInput
  _sum?: Prisma.TitelSumOrderByAggregateInput
}

export type TitelScalarWhereWithAggregatesInput = {
  AND?: Prisma.TitelScalarWhereWithAggregatesInput | Prisma.TitelScalarWhereWithAggregatesInput[]
  OR?: Prisma.TitelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TitelScalarWhereWithAggregatesInput | Prisma.TitelScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Titel"> | number
  titel?: Prisma.StringWithAggregatesFilter<"Titel"> | string
  untertitel?: Prisma.StringNullableWithAggregatesFilter<"Titel"> | string | null
  buchId?: Prisma.IntWithAggregatesFilter<"Titel"> | number
}

export type TitelCreateInput = {
  titel: string
  untertitel?: string | null
  buch: Prisma.BuchCreateNestedOneWithoutTitelInput
}

export type TitelUncheckedCreateInput = {
  id?: number
  titel: string
  untertitel?: string | null
  buchId: number
}

export type TitelUpdateInput = {
  titel?: Prisma.StringFieldUpdateOperationsInput | string
  untertitel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buch?: Prisma.BuchUpdateOneRequiredWithoutTitelNestedInput
}

export type TitelUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  titel?: Prisma.StringFieldUpdateOperationsInput | string
  untertitel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buchId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TitelCreateManyInput = {
  id?: number
  titel: string
  untertitel?: string | null
  buchId: number
}

export type TitelUpdateManyMutationInput = {
  titel?: Prisma.StringFieldUpdateOperationsInput | string
  untertitel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TitelUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  titel?: Prisma.StringFieldUpdateOperationsInput | string
  untertitel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  buchId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TitelNullableScalarRelationFilter = {
  is?: Prisma.TitelWhereInput | null
  isNot?: Prisma.TitelWhereInput | null
}

export type TitelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  titel?: Prisma.SortOrder
  untertitel?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type TitelAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type TitelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  titel?: Prisma.SortOrder
  untertitel?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type TitelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  titel?: Prisma.SortOrder
  untertitel?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type TitelSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  buchId?: Prisma.SortOrder
}

export type TitelCreateNestedOneWithoutBuchInput = {
  create?: Prisma.XOR<Prisma.TitelCreateWithoutBuchInput, Prisma.TitelUncheckedCreateWithoutBuchInput>
  connectOrCreate?: Prisma.TitelCreateOrConnectWithoutBuchInput
  connect?: Prisma.TitelWhereUniqueInput
}

export type TitelUncheckedCreateNestedOneWithoutBuchInput = {
  create?: Prisma.XOR<Prisma.TitelCreateWithoutBuchInput, Prisma.TitelUncheckedCreateWithoutBuchInput>
  connectOrCreate?: Prisma.TitelCreateOrConnectWithoutBuchInput
  connect?: Prisma.TitelWhereUniqueInput
}

export type TitelUpdateOneWithoutBuchNestedInput = {
  create?: Prisma.XOR<Prisma.TitelCreateWithoutBuchInput, Prisma.TitelUncheckedCreateWithoutBuchInput>
  connectOrCreate?: Prisma.TitelCreateOrConnectWithoutBuchInput
  upsert?: Prisma.TitelUpsertWithoutBuchInput
  disconnect?: Prisma.TitelWhereInput | boolean
  delete?: Prisma.TitelWhereInput | boolean
  connect?: Prisma.TitelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TitelUpdateToOneWithWhereWithoutBuchInput, Prisma.TitelUpdateWithoutBuchInput>, Prisma.TitelUncheckedUpdateWithoutBuchInput>
}

export type TitelUncheckedUpdateOneWithoutBuchNestedInput = {
  create?: Prisma.XOR<Prisma.TitelCreateWithoutBuchInput, Prisma.TitelUncheckedCreateWithoutBuchInput>
  connectOrCreate?: Prisma.TitelCreateOrConnectWithoutBuchInput
  upsert?: Prisma.TitelUpsertWithoutBuchInput
  disconnect?: Prisma.TitelWhereInput | boolean
  delete?: Prisma.TitelWhereInput | boolean
  connect?: Prisma.TitelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TitelUpdateToOneWithWhereWithoutBuchInput, Prisma.TitelUpdateWithoutBuchInput>, Prisma.TitelUncheckedUpdateWithoutBuchInput>
}

export type TitelCreateWithoutBuchInput = {
  titel: string
  untertitel?: string | null
}

export type TitelUncheckedCreateWithoutBuchInput = {
  id?: number
  titel: string
  untertitel?: string | null
}

export type TitelCreateOrConnectWithoutBuchInput = {
  where: Prisma.TitelWhereUniqueInput
  create: Prisma.XOR<Prisma.TitelCreateWithoutBuchInput, Prisma.TitelUncheckedCreateWithoutBuchInput>
}

export type TitelUpsertWithoutBuchInput = {
  update: Prisma.XOR<Prisma.TitelUpdateWithoutBuchInput, Prisma.TitelUncheckedUpdateWithoutBuchInput>
  create: Prisma.XOR<Prisma.TitelCreateWithoutBuchInput, Prisma.TitelUncheckedCreateWithoutBuchInput>
  where?: Prisma.TitelWhereInput
}

export type TitelUpdateToOneWithWhereWithoutBuchInput = {
  where?: Prisma.TitelWhereInput
  data: Prisma.XOR<Prisma.TitelUpdateWithoutBuchInput, Prisma.TitelUncheckedUpdateWithoutBuchInput>
}

export type TitelUpdateWithoutBuchInput = {
  titel?: Prisma.StringFieldUpdateOperationsInput | string
  untertitel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TitelUncheckedUpdateWithoutBuchInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  titel?: Prisma.StringFieldUpdateOperationsInput | string
  untertitel?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type TitelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  titel?: boolean
  untertitel?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["titel"]>

export type TitelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  titel?: boolean
  untertitel?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["titel"]>

export type TitelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  titel?: boolean
  untertitel?: boolean
  buchId?: boolean
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}, ExtArgs["result"]["titel"]>

export type TitelSelectScalar = {
  id?: boolean
  titel?: boolean
  untertitel?: boolean
  buchId?: boolean
}

export type TitelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "titel" | "untertitel" | "buchId", ExtArgs["result"]["titel"]>
export type TitelInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}
export type TitelIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}
export type TitelIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  buch?: boolean | Prisma.BuchDefaultArgs<ExtArgs>
}

export type $TitelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Titel"
  objects: {
    buch: Prisma.$BuchPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    titel: string
    untertitel: string | null
    buchId: number
  }, ExtArgs["result"]["titel"]>
  composites: {}
}

export type TitelGetPayload<S extends boolean | null | undefined | TitelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TitelPayload, S>

export type TitelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TitelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: TitelCountAggregateInputType | true
  }

export interface TitelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Titel'], meta: { name: 'Titel' } }
  /**
   * Find zero or one Titel that matches the filter.
   * @param {TitelFindUniqueArgs} args - Arguments to find a Titel
   * @example
   * // Get one Titel
   * const titel = await prisma.titel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TitelFindUniqueArgs>(args: Prisma.SelectSubset<T, TitelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TitelClient<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Titel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TitelFindUniqueOrThrowArgs} args - Arguments to find a Titel
   * @example
   * // Get one Titel
   * const titel = await prisma.titel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TitelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TitelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TitelClient<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Titel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TitelFindFirstArgs} args - Arguments to find a Titel
   * @example
   * // Get one Titel
   * const titel = await prisma.titel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TitelFindFirstArgs>(args?: Prisma.SelectSubset<T, TitelFindFirstArgs<ExtArgs>>): Prisma.Prisma__TitelClient<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Titel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TitelFindFirstOrThrowArgs} args - Arguments to find a Titel
   * @example
   * // Get one Titel
   * const titel = await prisma.titel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TitelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TitelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TitelClient<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Titels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TitelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Titels
   * const titels = await prisma.titel.findMany()
   * 
   * // Get first 10 Titels
   * const titels = await prisma.titel.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const titelWithIdOnly = await prisma.titel.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TitelFindManyArgs>(args?: Prisma.SelectSubset<T, TitelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Titel.
   * @param {TitelCreateArgs} args - Arguments to create a Titel.
   * @example
   * // Create one Titel
   * const Titel = await prisma.titel.create({
   *   data: {
   *     // ... data to create a Titel
   *   }
   * })
   * 
   */
  create<T extends TitelCreateArgs>(args: Prisma.SelectSubset<T, TitelCreateArgs<ExtArgs>>): Prisma.Prisma__TitelClient<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Titels.
   * @param {TitelCreateManyArgs} args - Arguments to create many Titels.
   * @example
   * // Create many Titels
   * const titel = await prisma.titel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TitelCreateManyArgs>(args?: Prisma.SelectSubset<T, TitelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Titels and returns the data saved in the database.
   * @param {TitelCreateManyAndReturnArgs} args - Arguments to create many Titels.
   * @example
   * // Create many Titels
   * const titel = await prisma.titel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Titels and only return the `id`
   * const titelWithIdOnly = await prisma.titel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TitelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TitelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Titel.
   * @param {TitelDeleteArgs} args - Arguments to delete one Titel.
   * @example
   * // Delete one Titel
   * const Titel = await prisma.titel.delete({
   *   where: {
   *     // ... filter to delete one Titel
   *   }
   * })
   * 
   */
  delete<T extends TitelDeleteArgs>(args: Prisma.SelectSubset<T, TitelDeleteArgs<ExtArgs>>): Prisma.Prisma__TitelClient<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Titel.
   * @param {TitelUpdateArgs} args - Arguments to update one Titel.
   * @example
   * // Update one Titel
   * const titel = await prisma.titel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TitelUpdateArgs>(args: Prisma.SelectSubset<T, TitelUpdateArgs<ExtArgs>>): Prisma.Prisma__TitelClient<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Titels.
   * @param {TitelDeleteManyArgs} args - Arguments to filter Titels to delete.
   * @example
   * // Delete a few Titels
   * const { count } = await prisma.titel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TitelDeleteManyArgs>(args?: Prisma.SelectSubset<T, TitelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Titels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TitelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Titels
   * const titel = await prisma.titel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TitelUpdateManyArgs>(args: Prisma.SelectSubset<T, TitelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Titels and returns the data updated in the database.
   * @param {TitelUpdateManyAndReturnArgs} args - Arguments to update many Titels.
   * @example
   * // Update many Titels
   * const titel = await prisma.titel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Titels and only return the `id`
   * const titelWithIdOnly = await prisma.titel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TitelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TitelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Titel.
   * @param {TitelUpsertArgs} args - Arguments to update or create a Titel.
   * @example
   * // Update or create a Titel
   * const titel = await prisma.titel.upsert({
   *   create: {
   *     // ... data to create a Titel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Titel we want to update
   *   }
   * })
   */
  upsert<T extends TitelUpsertArgs>(args: Prisma.SelectSubset<T, TitelUpsertArgs<ExtArgs>>): Prisma.Prisma__TitelClient<runtime.Types.Result.GetResult<Prisma.$TitelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Titels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TitelCountArgs} args - Arguments to filter Titels to count.
   * @example
   * // Count the number of Titels
   * const count = await prisma.titel.count({
   *   where: {
   *     // ... the filter for the Titels we want to count
   *   }
   * })
  **/
  count<T extends TitelCountArgs>(
    args?: Prisma.Subset<T, TitelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TitelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Titel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TitelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TitelAggregateArgs>(args: Prisma.Subset<T, TitelAggregateArgs>): Prisma.PrismaPromise<GetTitelAggregateType<T>>

  /**
   * Group by Titel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TitelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TitelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TitelGroupByArgs['orderBy'] }
      : { orderBy?: TitelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TitelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTitelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Titel model
 */
readonly fields: TitelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Titel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TitelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  buch<T extends Prisma.BuchDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BuchDefaultArgs<ExtArgs>>): Prisma.Prisma__BuchClient<runtime.Types.Result.GetResult<Prisma.$BuchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Titel model
 */
export interface TitelFieldRefs {
  readonly id: Prisma.FieldRef<"Titel", 'Int'>
  readonly titel: Prisma.FieldRef<"Titel", 'String'>
  readonly untertitel: Prisma.FieldRef<"Titel", 'String'>
  readonly buchId: Prisma.FieldRef<"Titel", 'Int'>
}
    

// Custom InputTypes
/**
 * Titel findUnique
 */
export type TitelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * Filter, which Titel to fetch.
   */
  where: Prisma.TitelWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel findUniqueOrThrow
 */
export type TitelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * Filter, which Titel to fetch.
   */
  where: Prisma.TitelWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel findFirst
 */
export type TitelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * Filter, which Titel to fetch.
   */
  where?: Prisma.TitelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Titels to fetch.
   */
  orderBy?: Prisma.TitelOrderByWithRelationInput | Prisma.TitelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Titels.
   */
  cursor?: Prisma.TitelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Titels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Titels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Titels.
   */
  distinct?: Prisma.TitelScalarFieldEnum | Prisma.TitelScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel findFirstOrThrow
 */
export type TitelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * Filter, which Titel to fetch.
   */
  where?: Prisma.TitelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Titels to fetch.
   */
  orderBy?: Prisma.TitelOrderByWithRelationInput | Prisma.TitelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Titels.
   */
  cursor?: Prisma.TitelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Titels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Titels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Titels.
   */
  distinct?: Prisma.TitelScalarFieldEnum | Prisma.TitelScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel findMany
 */
export type TitelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * Filter, which Titels to fetch.
   */
  where?: Prisma.TitelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Titels to fetch.
   */
  orderBy?: Prisma.TitelOrderByWithRelationInput | Prisma.TitelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Titels.
   */
  cursor?: Prisma.TitelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Titels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Titels.
   */
  skip?: number
  distinct?: Prisma.TitelScalarFieldEnum | Prisma.TitelScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel create
 */
export type TitelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * The data needed to create a Titel.
   */
  data: Prisma.XOR<Prisma.TitelCreateInput, Prisma.TitelUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel createMany
 */
export type TitelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Titels.
   */
  data: Prisma.TitelCreateManyInput | Prisma.TitelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Titel createManyAndReturn
 */
export type TitelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * The data used to create many Titels.
   */
  data: Prisma.TitelCreateManyInput | Prisma.TitelCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Titel update
 */
export type TitelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * The data needed to update a Titel.
   */
  data: Prisma.XOR<Prisma.TitelUpdateInput, Prisma.TitelUncheckedUpdateInput>
  /**
   * Choose, which Titel to update.
   */
  where: Prisma.TitelWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel updateMany
 */
export type TitelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Titels.
   */
  data: Prisma.XOR<Prisma.TitelUpdateManyMutationInput, Prisma.TitelUncheckedUpdateManyInput>
  /**
   * Filter which Titels to update
   */
  where?: Prisma.TitelWhereInput
  /**
   * Limit how many Titels to update.
   */
  limit?: number
}

/**
 * Titel updateManyAndReturn
 */
export type TitelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * The data used to update Titels.
   */
  data: Prisma.XOR<Prisma.TitelUpdateManyMutationInput, Prisma.TitelUncheckedUpdateManyInput>
  /**
   * Filter which Titels to update
   */
  where?: Prisma.TitelWhereInput
  /**
   * Limit how many Titels to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Titel upsert
 */
export type TitelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * The filter to search for the Titel to update in case it exists.
   */
  where: Prisma.TitelWhereUniqueInput
  /**
   * In case the Titel found by the `where` argument doesn't exist, create a new Titel with this data.
   */
  create: Prisma.XOR<Prisma.TitelCreateInput, Prisma.TitelUncheckedCreateInput>
  /**
   * In case the Titel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TitelUpdateInput, Prisma.TitelUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel delete
 */
export type TitelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
  /**
   * Filter which Titel to delete.
   */
  where: Prisma.TitelWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Titel deleteMany
 */
export type TitelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Titels to delete
   */
  where?: Prisma.TitelWhereInput
  /**
   * Limit how many Titels to delete.
   */
  limit?: number
}

/**
 * Titel without action
 */
export type TitelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Titel
   */
  select?: Prisma.TitelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Titel
   */
  omit?: Prisma.TitelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TitelInclude<ExtArgs> | null
}

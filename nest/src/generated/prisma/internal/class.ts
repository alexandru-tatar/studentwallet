
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace.js"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "C:\\workspace\\software-engineering\\nest\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [
      "nativeDistinct",
      "relationJoins"
    ],
    "documentation": "https://github.com/prisma/prisma/releases/tag/6.12.0",
    "sourceFilePath": "C:\\workspace\\software-engineering\\nest\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.0-integration-remove-driver-adapter-flag-check.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "/// https://www.prisma.io/docs/orm/reference/prisma-schema-reference\n/// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generator\ngenerator client {\n  /// Default ab Prisma 7\n  /// https://www.prisma.io/docs/orm/prisma-schema/overview/generators#output-splitting-and-importing-types\n  /// https://www.prisma.io/blog/why-prisma-orm-generates-code-into-node-modules-and-why-it-ll-change\n  /// https://www.prisma.io/blog/rust-free-prisma-orm-is-ready-for-production\n  /// https://github.com/prisma/prisma/releases/tag/6.6.0\n  /// https://github.com/prisma/prisma/releases/tag/6.16.0\n  /// ESM-first\n  provider        = \"prisma-client\"\n  output          = \"../src/generated/prisma\"\n  /// https://www.prisma.io/docs/orm/reference/preview-features/client-preview-features#currently-active-preview-features\n  /// https://github.com/prisma/prisma/releases/tag/5.7.0\n  previewFeatures = [\"nativeDistinct\", \"relationJoins\"]\n  engineType      = \"client\"\n  /// https://github.com/prisma/prisma/releases/tag/6.12.0\n  // importFileExtension = \"ts\"\n}\n\n/// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#datasource\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  schemas  = [\"buch\"]\n}\n\nmodel Abbildung {\n  id           Int    @id @default(autoincrement())\n  beschriftung String\n  contentType  String @map(\"content_type\")\n  buchId       Int    @map(\"buch_id\")\n  /// https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults\n  buch         Buch   @relation(fields: [buchId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#index\n  @@index([buchId])\n  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-1\n  @@map(\"abbildung\")\n  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#schema\n  @@schema(\"buch\")\n}\n\nmodel Buch {\n  id            Int         @id @default(autoincrement())\n  version       Int         @default(0)\n  isbn          String      @unique\n  rating        Int\n  art           Buchart?\n  preis         Decimal     @db.Decimal(8, 2)\n  rabatt        Decimal     @db.Decimal(4, 3)\n  lieferbar     Boolean     @default(false)\n  datum         DateTime?   @db.Date\n  homepage      String?\n  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#json\n  schlagwoerter Json?\n  erzeugt       DateTime    @default(now()) @db.Timestamp(6)\n  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#updatedat\n  aktualisiert  DateTime    @default(now()) @updatedAt @db.Timestamp(6)\n  abbildungen   Abbildung[]\n  buchFile      BuchFile?\n  titel         Titel?\n\n  @@map(\"buch\")\n  @@schema(\"buch\")\n}\n\nmodel BuchFile {\n  id       Int     @id @default(autoincrement())\n  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#bytes\n  data     Bytes\n  filename String\n  mimetype String?\n  buchId   Int     @unique @map(\"buch_id\")\n  buch     Buch    @relation(fields: [buchId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@index([buchId])\n  @@map(\"buch_file\")\n  @@schema(\"buch\")\n}\n\nmodel Titel {\n  id         Int     @id @default(autoincrement())\n  titel      String\n  untertitel String?\n  buchId     Int     @unique @map(\"buch_id\")\n  buch       Buch    @relation(fields: [buchId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@index([titel])\n  @@map(\"titel\")\n  @@schema(\"buch\")\n}\n\n/// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#enum\nenum Buchart {\n  EPUB\n  HARDCOVER\n  PAPERBACK\n\n  @@map(\"buchart\")\n  @@schema(\"buch\")\n}\n",
  "inlineSchemaHash": "610a475de0dd5bb725d0519bb0c1463621238f96be7e0069a4fdadd86c60fd9d",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"Abbildung\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"beschriftung\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"content_type\"},{\"name\":\"buchId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"buch_id\"},{\"name\":\"buch\",\"kind\":\"object\",\"type\":\"Buch\",\"relationName\":\"AbbildungToBuch\"}],\"dbName\":\"abbildung\"},\"Buch\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"version\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isbn\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"art\",\"kind\":\"enum\",\"type\":\"Buchart\"},{\"name\":\"preis\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"rabatt\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"lieferbar\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"datum\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"homepage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schlagwoerter\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"erzeugt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"aktualisiert\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"abbildungen\",\"kind\":\"object\",\"type\":\"Abbildung\",\"relationName\":\"AbbildungToBuch\"},{\"name\":\"buchFile\",\"kind\":\"object\",\"type\":\"BuchFile\",\"relationName\":\"BuchToBuchFile\"},{\"name\":\"titel\",\"kind\":\"object\",\"type\":\"Titel\",\"relationName\":\"BuchToTitel\"}],\"dbName\":\"buch\"},\"BuchFile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"Bytes\"},{\"name\":\"filename\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mimetype\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buchId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"buch_id\"},{\"name\":\"buch\",\"kind\":\"object\",\"type\":\"Buch\",\"relationName\":\"BuchToBuchFile\"}],\"dbName\":\"buch_file\"},\"Titel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"titel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"untertitel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buchId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"buch_id\"},{\"name\":\"buch\",\"kind\":\"object\",\"type\":\"Buch\",\"relationName\":\"BuchToTitel\"}],\"dbName\":\"titel\"}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Abbildungs
   * const abbildungs = await prisma.abbildung.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Abbildungs
 * const abbildungs = await prisma.abbildung.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.abbildung`: Exposes CRUD operations for the **Abbildung** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Abbildungs
    * const abbildungs = await prisma.abbildung.findMany()
    * ```
    */
  get abbildung(): Prisma.AbbildungDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.buch`: Exposes CRUD operations for the **Buch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buches
    * const buches = await prisma.buch.findMany()
    * ```
    */
  get buch(): Prisma.BuchDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.buchFile`: Exposes CRUD operations for the **BuchFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuchFiles
    * const buchFiles = await prisma.buchFile.findMany()
    * ```
    */
  get buchFile(): Prisma.BuchFileDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.titel`: Exposes CRUD operations for the **Titel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Titels
    * const titels = await prisma.titel.findMany()
    * ```
    */
  get titel(): Prisma.TitelDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
